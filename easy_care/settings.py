"""
Django settings for easy_care project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import environ

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = [env("ALLOWED_HOSTS")]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS")


# Application definition
# Register Local(project) apps here
easy_care_apps = [
    'src.user',
    'src.user_group',
    'src.core_app',
    'src.item',
    'src.company',
    'src.supplier',
    'src.api',
    'src.customer',
    'src.customer_order',
    'src.purchase_order',
    'src.purchase',
    'src.sale',
    'src.financial_report',
    'tenant',
    'log_app',
    'src.store',
    'src.mobile_sms',
    'src.credit_management',
    'src.party_payment',
    'src.public',
    'src.blood_test',
    'src.blood_test_order'

]
# Register third party apps here.
THIRD_PARTY_APPS = [
    'corsheaders',
    'django_filters',
    'simple_history',
    'rest_framework_simplejwt.token_blacklist',
    "rest_framework",
    "drf_yasg",
    'django_rest_resetpassword',
    'drf_spectacular',
    'mptt',
    'channels'

]
# Django Default apps lists
INSTALLED_APPS = [
                     'django.contrib.admin',
                     'django.contrib.auth',
                     'django.contrib.contenttypes',
                     'django.contrib.sessions',
                     'django.contrib.messages',
                     'django.contrib.staticfiles',

                 ] + easy_care_apps + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'tenant.middlewares.TenantMiddleware',  # Custom middleware for tenants
    'simple_history.middleware.HistoryRequestMiddleware',  # Simple-history-middleware to track user
    'corsheaders.middleware.CorsMiddleware',  # Cors headers middleware

]

ROOT_URLCONF = 'easy_care.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'easy_care.wsgi.application'
ASGI_APPLICATION = "easy_care.asgi.application"
# Database Settings
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    },
    'log_db': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('LOG_DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}
# To route log_app to log_db and other apps to default database
DATABASE_ROUTERS = ["tenant.router.HistoryRouter"]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'custom_jwt_authentication.JWTAuthentication',
        # For debugging purpose
        "rest_framework.authentication.SessionAuthentication",
        # Any other authentications

    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',

    ],
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # Any other renders

    ),
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        # Any other parsers

    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',

    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',

}
# Settings For Swagger(doc) view
SPECTACULAR_SETTINGS = {
    'TITLE': 'EASY CARE API',
    'DESCRIPTION': 'easy care api',
    'VERSION': '1.0.0',
    # "SHOW_REQUEST_HEADERS": True,
    'POSTPROCESSING_HOOKS': [
        'drf_spectacular.hooks.postprocess_schema_enums',
        'drf_spectacular.contrib.djangorestframework_camel_case.camelize_serializer_fields'
    ]
    # OTHER SETTINGS

}
# Json web token configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

NESTED_FORM_PARSER = {
    'OPTIONS': {
        'allow_empty': True,
        'allow_blank': True
    }
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# Language Setup
LANGUAGE_CODE = 'en-us'
# Timezone Setup
TIME_ZONE = 'Asia/Kathmandu'
USE_I18N = True
USE_L10N = True
USE_TZ = True

AUTH_USER_MODEL = 'user.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Upload size for image files in bytes
MAX_UPLOAD_SIZE = 2097152

# Remove slash from end of api urls
APPEND_SLASH = False

# For images
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# For static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field


# For Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = 'dipee.info@gmail.com'
SERVER_EMAIL = 'dipee.info@gmail.com'
EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = "dipee.info@gmail.com"
EMAIL_HOST_PASSWORD = "voqhmmpuaqidgxwg"
EMAIL_PORT = 587


# LOGGING_CONFIG = None
if env('CUSTOM_LOGGING') == "TRUE":
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,

        'loggers': {

            'django.server': {
                'handlers': ['server_handler'],
                'level': 'INFO',
                'propagate': True,
            },

            'django.request': {
                'handlers': ['request_handler'],
                'level': 'INFO',
                'propagate': True,
            },

            'django.db.backends': {
                'handlers': ['db_handler'],
                'level': 'INFO',
                'propagate': False,
            },

            'django.security.*': {
                'handlers': ['security_handler'],
                'level': 'INFO',
                'propagate': False,
            },
        },

        'handlers': {
            'server_handler': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': "./custom_logs/server.log",
                'maxBytes': 100000,
                'backupCount': 3,
                'formatter': 'django.server',

            },
            'request_handler': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': "./custom_logs/request.log",
                'maxBytes': 100000,
                'backupCount': 3,
                'formatter': 'verbose',
            },
            'db_handler': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': "./custom_logs/database.log",
                'maxBytes': 100000,
                'backupCount': 3,
                'formatter': 'verbose',
            },
            'security_handler': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': "./custom_logs/security.log",
                'maxBytes': 100000,
                'backupCount': 3,
                'formatter': 'verbose',
            },
        },

        'formatters': {
            'django.server': {
                '()': 'django.utils.log.ServerFormatter',
                'format': '{levelname} [{server_time}] {module} {process:d} {thread:d}  {message} {request}',
                'style': '{',
            },
            'verbose': {
                'format': '{levelname} [{asctime}] {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
            'request_fromatter': {
                '()': 'django.utils.log.ServerFormatter',
                'format': '{levelname} [{asctime}] {module} {process:d} {thread:d} {message} {request}',
                'style': '{',
            }
        },

        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },

        },
    }
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
USE_X_FORWARDED_HOST = True

